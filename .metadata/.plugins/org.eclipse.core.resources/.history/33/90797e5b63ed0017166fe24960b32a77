package graphs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;


public class graph {
//	public static ArrayList<Integer> result=new ArrayList<>();
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		int e = scn.nextInt();
		int[][] edges = new int[n][n];
		for (int i = 0; i < e; i++) {
			int f = scn.nextInt();
			int s = scn.nextInt();
			edges[f][s] = 1;
			edges[s][f] = 1;
		}
		boolean[] visited=new boolean[n];
		int v1=scn.nextInt();
		int v2=scn.nextInt();
		ArrayList<Integer> result=getdfs(edges, n, v1,v2,visited);
		if(result==null){
			return ;
		}
		for(int i=0;i<result.size();i++){
			System.out.print(result.get(i)+" ");
		}
	}

	public static void bfs(int[][] edges, int n, int start) {
		LinkedList<Integer> queue = new LinkedList<>();
		boolean[] visited = new boolean[n];
		queue.addLast(start);
		visited[start] = true;
		while (!queue.isEmpty()) {
			int currentVertex = queue.removeFirst();
			System.out.print(currentVertex + " ");
			for (int i = 0; i < n; i++) {
				if (i == currentVertex)
					continue;
				if (edges[currentVertex][i] == 1 && !visited[i]) {
					queue.addLast(i);
					visited[i] = true;
				}
			}
		}
	}

	public static void dfs(int[][] edges, int n, int start,boolean[] visited) {
		System.out.print(start + " ");
		visited[start]=true;
		for (int i = 0; i < n; i++) {
			if(i==start)
				continue;
			if (edges[start][i] == 1) {
				if(visited[i])
					continue;
				dfs(edges, n, i,visited);
			}
		}
	}
	public static ArrayList<Integer> getdfs(int[][] edges, int n, int start,int end,boolean[] visited) {
//		System.out.print(start + " ");
		if(start==end){
			ArrayList<Integer> arr=new ArrayList<>();
			arr.add(end);
			return arr;
		}
		ArrayList<Integer> r=null;
//		System.out.print(start + " ");
		visited[start]=true;
		for (int i = 0; i < n; i++) {
			if(i==start)
				continue;
			if (edges[start][i] == 1) {
				if(visited[i])
					continue;
				r=getdfs(edges, n, i,end,visited);
				if(r!=null){
					r.add(start);
					return r;
				}
			}
		}
		
		return r;
	}
	
//	private boolean hasPathDFSI(Vertex vtx1, Vertex vtx2) {
//		HashMap<Vertex, Vertex> visited = new HashMap<>();
//		LinkedList<Vertex> stack = new LinkedList<>();
//
//		visited.put(vtx1, vtx1);
//		stack.addFirst(vtx1);
//
//		while (!stack.isEmpty()) {
//			Vertex vtx = stack.removeFirst();
//
//			// work area
//			if (vtx.neighbors.containsKey(vtx2)) {
//				return true;
//			}
//
//			Set<Vertex> nbrs = vtx.neighbors.keySet();
//			for (Vertex nbr : nbrs) {
//				if (!visited.containsKey(nbr)) {
//					visited.put(nbr, nbr);
//					stack.addFirst(nbr);
//				}
//			}
//		}
//
//		return false;
//	}

}
