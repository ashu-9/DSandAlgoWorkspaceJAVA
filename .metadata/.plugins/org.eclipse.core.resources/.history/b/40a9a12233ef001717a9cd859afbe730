package SegmentTree;

import java.util.Scanner;

public class SegmentTreeEvenOdd {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		
		long[] arr = new long[n];
		for (int i = 0; i < n; i++) {
			arr[i] = scn.nextLong();
		}
		int q = scn.nextInt();
		long[] treeOdd = new long[4 * n];
		long[] treeEven = new long[4 * n];
		buildTreeOdd(arr, treeOdd, 0, n - 1, 1);
		buildTreeEven(arr, treeEven, 0, n - 1, 1);
		for (int i = 0; i < q; i++) {
			int type = scn.nextInt();
			int left = scn.nextInt();
			int right = scn.nextInt();
			if (type == 1) {
				System.out.println(queryEven(treeEven, 0, n - 1, 1, left - 1, right - 1));
			} else if (type == 0) {
				updateTreeOdd(arr, treeOdd, 0, n - 1, 1, left - 1, right);
				updateTreeEven(arr, treeEven, 0, n - 1, 1, left - 1, right);
			} else {
				System.out.println(queryOdd(treeOdd, 0, n - 1, 1, left - 1, right - 1));
			}
		}
	}

	public static void buildTreeOdd(long[] arr, long[] tree, int start, int end, int treeNode) {
		if (start == end) {
			tree[treeNode] = (arr[start] % 2 != 0) ? 1 : 0;
			return;
		}
		int mid = (start + end) / 2;
		buildTreeOdd(arr, tree, start, mid, 2 * treeNode);
		buildTreeOdd(arr, tree, mid + 1, end, 2 * treeNode + 1);

		tree[treeNode] = tree[2 * treeNode]+tree[2 * treeNode + 1];
	}

	public static void buildTreeEven(long[] arr, long[] tree, int start, int end, int treeNode) {
		if (start == end) {
			tree[treeNode] = (arr[start] % 2 == 0) ? 1 : 0;
			return;
		}
		int mid = (start + end) / 2;
		buildTreeEven(arr, tree, start, mid, 2 * treeNode);
		buildTreeEven(arr, tree, mid + 1, end, 2 * treeNode + 1);

		tree[treeNode] = tree[2 * treeNode] + tree[2 * treeNode + 1];
	}

	public static void updateTreeOdd(long[] arr, long[] tree, int start, int end, int treeNode, int idx, long val) {
		if (start == end) {
			arr[idx] = val;
			tree[treeNode] = (val % 2 != 0) ? 1 : 0;
			return;
		}
		int mid = (start + end) / 2;
		if (idx > mid) {
			updateTreeOdd(arr, tree, mid + 1, end, 2 * treeNode + 1, idx, val);
		} else {
			updateTreeOdd(arr, tree, start, mid, 2 * treeNode, idx, val);
		}
		tree[treeNode] = tree[2 * treeNode] + tree[2 * treeNode + 1];
	}

	public static void updateTreeEven(long[] arr, long[] tree, int start, int end, int treeNode, int idx, long val) {
		if (start == end) {
			arr[idx] = val;
			tree[treeNode] = (val % 2 == 0) ? 1 : 0;
			return;
		}
		int mid = (start + end) / 2;
		if (idx > mid) {
			updateTreeOdd(arr, tree, mid + 1, end, 2 * treeNode + 1, idx, val);
		} else {
			updateTreeOdd(arr, tree, start, mid, 2 * treeNode, idx, val);
		}
		tree[treeNode] = tree[2 * treeNode] + tree[2 * treeNode + 1];
	}

	public static long queryOdd(long[] tree, int start, int end, int treeNode, int left, int right) {
		if (start > right || end < left) {
			return 0;
		}
		if (start >= left && end <= right) {
			return tree[treeNode];
		}
		int mid = (start + end) / 2;
		long ans1 = queryOdd(tree, start, mid, 2 * treeNode, left, right);
		long ans2 = queryOdd(tree, mid + 1, end, 2 * treeNode + 1, left, right);
		return ans1 + ans2;
	}

	public static long queryEven(long[] tree, int start, int end, int treeNode, int left, int right) {
		if (start > right || end < left) {
			return 0;
		}
		if (start >= left && end <= right) {
			return tree[treeNode];
		}
		int mid = (start + end) / 2;
		long ans1 = queryEven(tree, start, mid, 2 * treeNode, left, right);
		long ans2 = queryEven(tree, mid + 1, end, 2 * treeNode + 1, left, right);
		return ans1 + ans2;
	}

}
